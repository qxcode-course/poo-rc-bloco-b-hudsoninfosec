{
    "patches": [
        {
            "label": "2025-10-28_00-18-08",
            "content": "@@ -197,13 +197,8 @@\n pacity%7D%22\n-%0A    \n",
            "lines": "7"
        },
        {
            "label": "2025-10-28_00-47-32",
            "content": "@@ -97,21 +97,22 @@\n  self.__\n-level\n+charge\n  = capac\n@@ -115,16 +115,20 @@\n apacity%0A\n+    \n %0A    def\n@@ -132,13 +132,11 @@\n def \n-using\n+get\n Batt\n@@ -166,17 +166,17 @@\n rn f\n-'\n+%22\n %7Bself.__\n leve\n@@ -175,13 +175,14 @@\n f.__\n-level\n+charge\n %7D/%7Bs\n@@ -200,5 +200,10 @@\n ity%7D\n-'\n+%22%0A    \n",
            "lines": "8"
        },
        {
            "label": "2025-10-28_00-48-29",
            "content": "@@ -127,11 +127,13 @@\n def \n-get\n+using\n Batt\n@@ -197,143 +197,4 @@\n ty%7D'\n-%0A    %0A    def usingBattery(self, time: int):%0A        self.__charge -= time%0A        if self.__charge %3C 0:%0A            self.__charge = 0%0A    \n",
            "lines": "7"
        },
        {
            "label": "2025-10-28_01-20-58",
            "content": "@@ -329,177 +329,8 @@\n  = 0\n-%0A%0A    def carregar(self, power:int, time:int):%0A        self.__level += power * time%0A        if self.__level %3E self.__capacity:%0A            self.__level = self.__capacity\n %0A   \n",
            "lines": "13"
        },
        {
            "label": "2025-10-28_01-23-06",
            "content": "@@ -498,76 +498,8 @@\n city\n-%0A%0A    def hasCharge(self):%0A        return self.__level %3E 0%0A    %0A    \n %0A   \n",
            "lines": "18"
        },
        {
            "label": "2025-10-28_01-27-20",
            "content": "@@ -566,129 +566,8 @@\n     \n-def getCharge(self):%0A        self.__charge%0A%0A    def getCapacity(self):%0A        return self.__capacity%0A    %0Aclass Charger:\n %0A   \n",
            "lines": "23"
        },
        {
            "label": "2025-10-28_01-49-30",
            "content": "@@ -692,122 +692,4 @@\n     \n-def __init__(self, power: int):%0A        self.__power = power%0A%0A    def getPower(self):%0A        return self.__power%0A    \n",
            "lines": "29"
        },
        {
            "label": "2025-10-28_01-50-39",
            "content": "@@ -810,536 +810,4 @@\n     \n-%0Aclass Not:%0A    def __init__(self):%0A        self.__on = False%0A        self.__userTime = 0%0A        self.__battery: Battery %7C None = None%0A        self.__charger: Charger %7C None = None%0A%0A    def ligar(self):%0A        if(self.__battery is not None and self.__battery.hasCharge()) or self.__charger is not None:%0A            self.__on = True%0A        else:%0A            print(%22fail: n%C3%A3o foi poss%C3%ADvel ligar%22)%0A%0A    def desligar(self):%0A        if not self__on:%0A            print(%22fail: j%C3%A1 desligado%22)%0A            return%0A        self.__on = False\n",
            "lines": "34"
        },
        {
            "label": "2025-10-28_01-56-16",
            "content": "@@ -1342,623 +1342,4 @@\n alse\n-%0A%0A    def setBateria(self, capacity:int):%0A        if self.__battery:%0A            print(%22fail: bateria ja conectada%22)%0A            return%0A        self.__battery = Battery(capacity)%0A%0A    def rmBateria(self):%0A        if not self.__battery:%0A            print(%22fail: Sem bateria%22)%0A            return%0A        print(f%22Removido %7Bself.__battery.getBattery()%7D%22)%0A        self.__battery = None%0A        if not self.__charger:%0A            self.__on = False%0A%0A    def setCarregador(self, power:int):%0A        if self.__charger:%0A            print(%22fail: carregador ja conectado%22)%0A            return%0A        self.__charger = Charger(power)\n",
            "lines": "52"
        },
        {
            "label": "2025-10-28_02-00-48",
            "content": "@@ -1961,1087 +1961,4 @@\n wer)\n-%0A%0A    def rmCarregador(self):%0A        if not self.__charger:%0A            print(%22fail: Sem carregador%22)%0A            return%0A        %0A        print(f%22Removido carregador de %7Bself.__charger.getPower()%7DW%22)%0A        self.__charger = None%0A        if not self.__battery or not self.__battery.hasCharge():%0A            self.__on = False%0A%0A    def usar(self, time:int):%0A        if not self.__on:%0A            print(%22fail: notebook desligado%22)%0A            return%0A%0A        time = int(time)%0A        self.__userTime += time%0A%0A        if self.__battery and self.__charger:%0A            self.__battery.carregar(self.__charger.getPower(), time)%0A        elif self.__battery:%0A            start_charge = self.__battery.getCharge()%0A            self.__battery.usingBattery(time)%0A            if not self.__battery.hasCharge():%0A                print('fail: bateria descarregou')%0A                self.__on = False%0A                self.__userTime -= (time - start_charge)%0A        elif self.__charger:    %0A            pass%0A        else:%0A            print(%22fail: desligado%22)%0A            self.__on = False%0A            \n",
            "lines": "73"
        },
        {
            "label": "2025-10-28_02-07-08",
            "content": "@@ -3032,484 +3032,16 @@\n lse%0A\n-%0A    def show(self):%0A        status = 'ligado' if self.__on else 'desligado'%0A%0A        text = f'Notebook: %7Bstatus%7D'%0A        if self.__on:%0A            text += f' por %7Bself.__userTime%7D min'%0A%0A        parts = %5B%5D%0A%0A        if self.__charger:%0A            parts.append(f%22Carregador %7Bself.__charger.getPower()%7DW%22)%0A        if self.__battery:%0A            parts.append(f%22Bateria %7Bself.__battery.getBattery()%7D%22)%0A        if parts:%0A            text += %22, %22 + %22, %22.join(parts)%0A        print(text)%0A\n+            \n",
            "lines": "107"
        },
        {
            "label": "2025-10-28_02-09-22",
            "content": "@@ -3512,848 +3512,4 @@\n xt)%0A\n-%0Adef main():%0A    notebook = Not()%0A    while True:%0A        line = input()%0A        print(%22$%22 + line)%0A        args: list%5Bstr%5D = line.split(%22 %22)%0A%0A        if args%5B0%5D == %22end%22:%0A            break%0A        elif args%5B0%5D == %22show%22:%0A            notebook.show()%0A        elif args%5B0%5D == %22turn_on%22:%0A            notebook.ligar()%0A        elif args%5B0%5D == %22turn_off%22:%0A            notebook.desligar()%0A        elif args%5B0%5D == %22use%22:%0A            notebook.usar(int(args%5B1%5D))%0A        elif args%5B0%5D == %22set_charger%22:%0A            notebook.setCarregador(int(args%5B1%5D))%0A        elif args%5B0%5D == %22rm_charger%22:%0A            notebook.rmCarregador()%0A        elif args%5B0%5D == %22set_battery%22:%0A            notebook.setBateria(int(args%5B1%5D))%0A        elif args%5B0%5D == %22rm_battery%22:%0A            notebook.rmBateria()%0A        else:%0A            print(%22fail: comando invalido%22)%0Amain()%0A        %0A\n",
            "lines": "123"
        },
        {
            "label": "2025-10-28_02-09-48",
            "content": "@@ -2356,32 +2356,41 @@\n     print(%22fail:\n+ notebook\n  desligado%22)%0A   \n",
            "lines": "153"
        },
        {
            "label": "2025-10-28_02-16-19",
            "content": "@@ -1240,33 +1240,32 @@\n      if not self\n-.\n __on:%0A          \n",
            "lines": "153"
        },
        {
            "label": "2025-10-28_02-18-31",
            "content": "@@ -1281,17 +1281,17 @@\n %22fail: j\n-a\n+%C3%A1\n  desliga\n",
            "lines": "153"
        },
        {
            "label": "2025-10-28_02-18-43",
            "content": "@@ -1281,17 +1281,17 @@\n %22fail: j\n-%C3%A1\n+a\n  desliga\n@@ -1890,9 +1890,9 @@\n or j\n-%C3%A1\n+a\n  con\n",
            "lines": "153"
        },
        {
            "label": "2025-10-28_02-19-17",
            "content": "@@ -2106,32 +2106,46 @@\n rint(f%22Removido \n+carregador de \n %7Bself.__charger.\n",
            "lines": "153"
        },
        {
            "label": "2025-10-28_02-19-43",
            "content": "@@ -251,21 +251,22 @@\n  self.__\n-level\n+charge\n  -= time\n@@ -284,21 +284,22 @@\n  self.__\n-level\n+charge\n  %3C 0:%0A  \n@@ -315,21 +315,22 @@\n  self.__\n-level\n+charge\n  = 0%0A%0A  \n@@ -356,17 +356,16 @@\n , power:\n- \n int, tim\n@@ -362,25 +362,24 @@\n r:int, time:\n- \n int):%0A      \n@@ -591,35 +591,29 @@\n         \n-return \n self.__\n-level\n+charge\n %0A%0A    de\n@@ -660,25 +660,24 @@\n .__capacity%0A\n-%0A\n     %0Aclass C\n",
            "lines": "153"
        },
        {
            "label": "2025-10-28_02-21-31",
            "content": "@@ -2763,24 +2763,32 @@\n print('fail:\n+ bateria\n  descarregou\n",
            "lines": "154"
        },
        {
            "label": "2025-10-28_02-21-53",
            "content": "class Battery:\n    def __init__(self, capacity: int):\n        self.__capacity = capacity\n        self.__level = capacity\n\n    def getBattery(self):\n        return f'{self.__level}/{self.__capacity}'\n    \n    def usingBattery(self, time: int):\n        self.__level -= time\n        if self.__level < 0:\n            self.__level = 0\n\n    def carregar(self, power: int, time: int):\n        self.__level += power * time\n        if self.__level > self.__capacity:\n            self.__level = self.__capacity\n\n    def hasCharge(self):\n        return self.__level > 0\n    \n    def getCharge(self):\n        return self.__level\n\n    def getCapacity(self):\n        return self.__capacity\n\n    \nclass Charger:\n    def __init__(self, power: int):\n        self.__power = power\n\n    def getPower(self):\n        return self.__power\n    \nclass Not:\n    def __init__(self):\n        self.__on = False\n        self.__userTime = 0\n        self.__battery: Battery | None = None\n        self.__charger: Charger | None = None\n\n    def ligar(self):\n        if(self.__battery is not None and self.__battery.hasCharge()) or self.__charger is not None:\n            self.__on = True\n        else:\n            print(\"fail: n\u00e3o foi poss\u00edvel ligar\")\n\n    def desligar(self):\n        if not self.__on:\n            print(\"fail: j\u00e1 desligado\")\n            return\n        self.__on = False\n\n    def setBateria(self, capacity:int):\n        if self.__battery:\n            print(\"fail: bateria ja conectada\")\n            return\n        self.__battery = Battery(capacity)\n\n    def rmBateria(self):\n        if not self.__battery:\n            print(\"fail: Sem bateria\")\n            return\n        print(f\"Removido {self.__battery.getBattery()}\")\n        self.__battery = None\n        if not self.__charger:\n            self.__on = False\n\n    def setCarregador(self, power:int):\n        if self.__charger:\n            print(\"fail: carregador j\u00e1 conectado\")\n            return\n        self.__charger = Charger(power)\n\n    def rmCarregador(self):\n        if not self.__charger:\n            print(\"fail: Sem carregador\")\n            return\n        \n        print(f\"Removido {self.__charger.getPower()}W\")\n        self.__charger = None\n        if not self.__battery or not self.__battery.hasCharge():\n            self.__on = False\n\n    def usar(self, time:int):\n        if not self.__on:\n            print(\"fail: desligado\")\n            return\n\n        time = int(time)\n        self.__userTime += time\n\n        if self.__battery and self.__charger:\n            self.__battery.carregar(self.__charger.getPower(), time)\n        elif self.__battery:\n            start_charge = self.__battery.getCharge()\n            self.__battery.usingBattery(time)\n            if not self.__battery.hasCharge():\n                print('fail: descarregou')\n                self.__on = False\n                self.__userTime -= (time - start_charge)\n        elif self.__charger:    \n            pass\n        else:\n            print(\"fail: desligado\")\n            self.__on = False\n\n    def show(self):\n        status = 'ligado' if self.__on else 'desligado'\n\n        text = f'Notebook: {status}'\n        if self.__on:\n            text += f' por {self.__userTime} min'\n\n        parts = []\n\n        if self.__charger:\n            parts.append(f\"Carregador {self.__charger.getPower()}W\")\n        if self.__battery:\n            parts.append(f\"Bateria {self.__battery.getBattery()}\")\n        if parts:\n            text += \", \" + \", \".join(parts)\n        print(text)\n\ndef main():\n    notebook = Not()\n    while True:\n        line = input()\n        print(\"$\" + line)\n        args: list[str] = line.split(\" \")\n\n        if args[0] == \"end\":\n            break\n        elif args[0] == \"show\":\n            notebook.show()\n        elif args[0] == \"turn_on\":\n            notebook.ligar()\n        elif args[0] == \"turn_off\":\n            notebook.desligar()\n        elif args[0] == \"use\":\n            notebook.usar(int(args[1]))\n        elif args[0] == \"set_charger\":\n            notebook.setCarregador(int(args[1]))\n        elif args[0] == \"rm_charger\":\n            notebook.rmCarregador()\n        elif args[0] == \"set_battery\":\n            notebook.setBateria(int(args[1]))\n        elif args[0] == \"rm_battery\":\n            notebook.rmBateria()\n        else:\n            print(\"fail: comando invalido\")\nmain()\n        \n",
            "lines": "154"
        }
    ]
}